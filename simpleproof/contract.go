// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package simpleproof

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	VerifyGasCost uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// SimpleproofRawABI contains the raw ABI of Simpleproof contract.
	//go:embed contract.abi
	SimpleproofRawABI string

	SimpleproofABI = contract.ParseABI(SimpleproofRawABI)

	SimpleproofPrecompile = createSimpleproofPrecompile()
)

type Circuit struct {
	X frontend.Variable
	Y frontend.Variable
}

type VerifyInput struct {
	X uint64
	Y uint64
}

// UnpackVerifyInput attempts to unpack [input] as VerifyInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackVerifyInput(input []byte) (VerifyInput, error) {
	inputStruct := VerifyInput{}
	err := SimpleproofABI.UnpackInputIntoInterface(&inputStruct, "verify", input)

	return inputStruct, err
}

// PackVerify packs [inputStruct] of type VerifyInput into the appropriate arguments for verify.
func PackVerify(inputStruct VerifyInput) ([]byte, error) {
	return SimpleproofABI.Pack("verify", inputStruct.X, inputStruct.Y)
}

// PackVerifyOutput attempts to pack given result of type bool
// to conform the ABI outputs.
func PackVerifyOutput(result bool) ([]byte, error) {
	return SimpleproofABI.PackOutput("verify", result)
}

// UnpackVerifyOutput attempts to unpack given [output] into the bool type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackVerifyOutput(output []byte) (bool, error) {
	res, err := SimpleproofABI.Unpack("verify", output)
	if err != nil {
		return false, err
	}
	unpacked := *abi.ConvertType(res[0], new(bool)).(*bool)
	return unpacked, nil
}

func (circuit *Circuit) Define(api frontend.API) error {
	// compute x**3 and store it in the local variable x3.
	x3 := api.Mul(circuit.X, circuit.X, circuit.X)

	// compute x**3 + x + 5 and store it in the local variable res
	res := api.Add(x3, circuit.X, 5)

	// assert that the statement x**3 + x + 5 == y is true.
	api.AssertIsEqual(circuit.Y, res)
	return nil
}

func verify(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, VerifyGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the VerifyInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackVerifyInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output bool // CUSTOM CODE FOR AN OUTPUT
	var circuit Circuit
	ccs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &circuit)

	pk, vk, _ := groth16.Setup(ccs)

	assignment := Circuit{X: inputStruct.X, Y: inputStruct.Y}
	witness, _ := frontend.NewWitness(&assignment, ecc.BN254.ScalarField())

	publicWitness, _ := witness.Public()

	proof, _ := groth16.Prove(ccs, pk, witness)

	isValid := groth16.Verify(proof, vk, publicWitness)

	if isValid == nil {
		output = true
	} else {
		output = false
	}

	packedOutput, err := PackVerifyOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createSimpleproofPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createSimpleproofPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"verify": verify,
	}

	for name, function := range abiFunctionMap {
		method, ok := SimpleproofABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
